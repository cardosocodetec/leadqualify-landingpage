{"version":3,"file":"static/js/621.fe5401a5.chunk.js","mappings":"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","sources":["component/Navbar/Scrollspy.js","component/Navbar/NavBar.js"],"sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass scrollSpy extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.props = props;\r\n        this.scrollTargetIds = this.props.scrollTargetIds;\r\n        this.activeNavClass = this.props.activeNavClass;\r\n        this.scrollDuration = Number(this.props.scrollDuration) || 1000;\r\n        this.headerBackground = this.props.headerBackground === \"true\" ? true : false;\r\n\r\n        if (this.props.router && this.props.router === \"HashRouter\") {\r\n            this.homeDefaultLink = \"#/\";\r\n            this.hashIdentifier = \"#/#\";\r\n        } else {\r\n            this.homeDefaultLink = \"/\";\r\n            this.hashIdentifier = \"#\";\r\n        }\r\n        this.scrollSection.bind(this);\r\n    }\r\n\r\n    easeInOutQuad(current_time, start, change, duration) {\r\n        current_time /= duration / 2;\r\n        if (current_time < 1) return change / 2 * current_time * current_time + start;\r\n        current_time--;\r\n        return -change / 2 * (current_time * (current_time - 2) - 1) + start;\r\n    };\r\n\r\n    scrollTo(start, to, duration) {\r\n        let change = to - start,\r\n            currentTime = 0,\r\n            increment = 10;\r\n\r\n        let animateScroll = () => {\r\n            currentTime += increment;\r\n            let val = this.easeInOutQuad(currentTime, start, change, duration);\r\n            window.scrollTo(0, val);\r\n            if (currentTime < duration) {\r\n                setTimeout(animateScroll, increment);\r\n            }\r\n        };\r\n\r\n        animateScroll();\r\n    }\r\n\r\n    getNavLinkElement(sectionID) {\r\n        return document.querySelector(`a[href='${this.hashIdentifier}${sectionID}']`);\r\n    }\r\n\r\n    getNavToSectionID(navHref) {\r\n        return navHref.includes(this.hashIdentifier) ? navHref.replace(this.hashIdentifier, \"\") : \"\";\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (document.querySelector(`a[href='${this.homeDefaultLink}']`)) {\r\n            document.querySelector(`a[href='${this.homeDefaultLink}']`).addEventListener(\"click\", (event) => {\r\n                event.preventDefault();\r\n                this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n                window.location.hash = \"\";\r\n            });\r\n        }\r\n\r\n        document.querySelector(\"div[data-nav='list']\").querySelectorAll(\"a\").forEach((navLink) => {\r\n            navLink.addEventListener(\"click\", (event) => {\r\n                event.preventDefault();\r\n                let sectionID = this.getNavToSectionID(navLink.getAttribute(\"href\"));\r\n\r\n                if (sectionID) {\r\n                    let scrollTargetPosition = document.getElementById(sectionID).offsetTop - (this.headerBackground ? document.querySelector(\"div[data-nav='list']\").scrollHeight : 0);\r\n                    this.scrollTo(window.pageYOffset, scrollTargetPosition, this.scrollDuration);\r\n                } else {\r\n                    this.scrollTo(window.pageYOffset, 0, this.scrollDuration);\r\n                }\r\n            });\r\n        })\r\n\r\n        window.addEventListener(\"scroll\", this.scrollSection, true );\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener(\"scroll\", this.scrollSection, true );\r\n    }\r\n    \r\n    scrollSection = () => {\r\n            let scrollSectionOffsetTop;\r\n            this.scrollTargetIds.forEach((sectionID, index) => {\r\n                scrollSectionOffsetTop = document.getElementById(sectionID).offsetTop - (this.headerBackground ? document.querySelector(\"div[data-nav='list']\").scrollHeight : 0);\r\n\r\n                if (window.pageYOffset >= scrollSectionOffsetTop && window.pageYOffset < scrollSectionOffsetTop + document.getElementById(sectionID).scrollHeight) {\r\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\r\n                    this.clearOtherNavLinkActiveStyle(sectionID)\r\n                } else {\r\n                    this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\r\n                }\r\n\r\n                if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight && index === this.scrollTargetIds.length - 1) {\r\n                    this.getNavLinkElement(sectionID).classList.add(this.activeNavClass);\r\n                    this.getNavLinkElement(sectionID).parentNode.classList.add(this.activeNavClass);\r\n                    this.clearOtherNavLinkActiveStyle(sectionID);\r\n                }\r\n            });\r\n    }\r\n    clearOtherNavLinkActiveStyle(excludeSectionID) {\r\n        this.scrollTargetIds.forEach((sectionID, index) => {\r\n            if (sectionID !== excludeSectionID) {\r\n                this.getNavLinkElement(sectionID).classList.remove(this.activeNavClass);\r\n                this.getNavLinkElement(sectionID).parentNode.classList.remove(this.activeNavClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div data-nav=\"list\" className={this.props.className}>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default scrollSpy;","import React, { Component } from \"react\";\r\nimport {\r\n  Nav,\r\n  NavbarBrand,\r\n  NavbarToggler,\r\n  NavItem,\r\n  NavLink,\r\n  Container,\r\n  Collapse,\r\n} from \"reactstrap\";\r\n// Import Logo\r\nimport logodark from \"../../assets/images/Logo-LQ.png\";\r\nimport logolight from \"../../assets/images/Logo-LQ.png\";\r\n\r\n//import icon\r\nimport FeatherIcon from \"feather-icons-react\";\r\n\r\nimport ScrollspyNav from \"./Scrollspy\";\r\n\r\nclass NavbarPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpenMenu: false,\r\n    };\r\n  }\r\n\r\n  toggle = () => {\r\n    this.setState({ isOpenMenu: !this.state.isOpenMenu });\r\n  };\r\n\r\n  render() {\r\n    var targetId = this.props.navItems.map((item) => {\r\n      return item.idnm;\r\n    });\r\n    return (\r\n      <React.Fragment>\r\n        {/* Navbar Start */}\r\n        <nav\r\n         className={\"navbar navbar-expand-lg fixed-top sticky \" + this.props.navClass}\r\n        >\r\n          <Container>\r\n            {/* LOGO */}\r\n            <NavbarBrand style={{borderRadius:10, opacity:0.85, backgroundColor:'#ffffff'}} className= \"logo\" href=\"/\">\r\n              {this.props.imglight === true ? (\r\n                <img src={logolight} alt=\"\" style= {{opacity:0.8}} height=\"60\" />\r\n              ) : (\r\n                <img src={logodark} alt=\"\" height=\"40\" />\r\n              )}\r\n            </NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle}>\r\n              <i>\r\n                <FeatherIcon icon=\"menu\" />\r\n              </i>\r\n            </NavbarToggler>\r\n            <Collapse\r\n              id=\"navbarCollapse\"\r\n              isOpen={this.state.isOpenMenu}\r\n              className=\" navbar-collapse\"\r\n            >\r\n              <ScrollspyNav\r\n                scrollTargetIds={targetId}\r\n                scrollDuration=\"800\"\r\n                headerBackground=\"true\"\r\n                activeNavClass=\"active\"\r\n                className=\"navbar-collapse\"\r\n              >\r\n                <Nav navbar className=\"ms-auto navbar-center\" id=\"mySidenav\">\r\n                  {this.props.navItems.map((item, key) => (\r\n                    <NavItem\r\n                      key={key}\r\n                      className={item.navheading === \"Home\" ? \"active\" : \"\"}\r\n                    >\r\n                      <NavLink\r\n                        className={item.navheading === \"Home\" ? \"active\" : \"\"}\r\n                        href={\"#\" + item.idnm}\r\n                      >\r\n                        {item.navheading}\r\n                      </NavLink>\r\n                    </NavItem>\r\n                  ))}\r\n                </Nav>\r\n              </ScrollspyNav>\r\n            </Collapse>\r\n          </Container>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n// }\r\nexport default NavbarPage;\r\n"],"names":["scrollSpy","props","scrollSection","scrollSectionOffsetTop","scrollTargetIds","forEach","sectionID","index","document","getElementById","offsetTop","headerBackground","querySelector","scrollHeight","window","pageYOffset","getNavLinkElement","classList","add","activeNavClass","parentNode","clearOtherNavLinkActiveStyle","remove","innerHeight","body","length","scrollDuration","Number","router","homeDefaultLink","hashIdentifier","bind","current_time","start","change","duration","to","currentTime","animateScroll","val","easeInOutQuad","scrollTo","setTimeout","this","navHref","includes","replace","addEventListener","event","preventDefault","location","hash","querySelectorAll","navLink","getNavToSectionID","getAttribute","scrollTargetPosition","removeEventListener","excludeSectionID","className","children","Component","NavbarPage","toggle","setState","isOpenMenu","state","targetId","navItems","map","item","idnm","navClass","style","borderRadius","opacity","backgroundColor","href","imglight","src","logolight","alt","height","logodark","onClick","icon","id","isOpen","Scrollspy","navbar","key","navheading"],"sourceRoot":""}